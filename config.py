import os
from pathlib import Path

from core.utils.path_kit import get_folder_path

# ====================================================================================================
# 1️⃣ 回测配置
# ====================================================================================================
# 回测数据的起始时间。
start_date = "2023-01-01"
# 回测数据的结束时间。可以设为 None，表示使用最新数据
end_date = "2023-12-31"

# ====================================================================================================
# 2️⃣ 数据配置
# ====================================================================================================
data_center_path = r"D:\python大作业\processed_data"  # 数据中心的文件夹,存放数据来源
runtime_data_path = r"D:\python大作业\data"  # 回测结果存放的的文件夹，存放回测结果

# ====================================================================================================
# 3️⃣ 策略配置
# ====================================================================================================
backtest_name = "测试"  # 回测的策略组合的名称。可以自己任意取。一般建议，一个回测组，就是实盘中的一个账户。

# 严格模式配置
# True: 严格按照过滤后的股池均分资金（择时信号为0的股票也分配资金）
# False: 只按照每个交易日择时信号为1的股票均分资金（择时信号为0的股票不分配资金）
strict_mode = False

# 策略明细
strategy_list = [
    {
        'name': '自定义策略',
        'select_num': 30,
        'cap_weight': 1,
        'rebalance_time': 'open',
        'fin_cols':[],
        'filter_list': [
            ("沪深300成分",True,1,""),
            ("情绪因子",True, None, ),
        ],
        'timing_list': [
            # ('Ma', True, (5,20), 1),
            ('MACD', True, None, 1),
            ('RSI', True, None, 1),
            ('VWMA', True, None, 1),
        ],
    },
]


# 上市至今交易天数
days_listed = 250

# ====================================================================================================
# 4️⃣ 模拟交易配置
# ====================================================================================================
# 实盘模拟配置
initial_cash = 1_000_000.0  # 初始资金100万
c_rate = 1.2/10000             # 万分之三佣金
t_rate = 1/1000           # 千分之一印花税
rebalance_time = 'open'      # 调仓时间：'open'开盘价 或 'close'收盘价

# ====================================================================================================
# 5️⃣ 其他配置
# ====================================================================================================
# n_jobs = os.cpu_count() - 1
n_jobs =4
# ==== factor_col_limit 介绍 ====
factor_col_limit = 8  # 内存优化选项，一次性计算多少列因子。8 是16G电脑的推荐配置
# - 数字越大，计算速度越快，但同时内存占用也会增加。
# - 该数字是在 "因子数量 * 参数数量" 的基础上进行优化的。
#   - 例如，当你遍历 200 个因子，每个因子有 10 个参数，总共生成 2000 列因子。
#   - 如果 `factor_col_limit` 设置为 64，则计算会拆分为 ceil(2000 / 64) = 32 个批次，每次最多处理 64 列因子。
# - 以上数据仅供参考，具体值会根据机器配置、策略复杂性、回测周期等有所不同。建议大家根据实际情况，逐步测试自己机器的性能极限，找到适合的最优值。

# =====参数预检查=====
runtime_folder = get_folder_path(runtime_data_path, "运行缓存")
if not Path(data_center_path).exists():
    print(f"数据中心路径不存在：{data_center_path}，程序退出")
    exit()

# 强制转换为 Path 对象
data_center_path = Path(data_center_path)
runtime_data_path = Path(runtime_data_path)
